syntax = "proto3";

package system;

option go_package = "github.com/febriandani/ecommerce-be-system-service/proto/system";

import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto"; // untuk Swagger/OpenAPI (optional)

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "System Service API";
    version: "1.0";
  };
  security_definitions: {
    security: {
      key: "basic";
      value: {
        type: TYPE_BASIC;
        description: "Basic authentication with username and password";
      };
    };
  };
  security: {
    security_requirement: {
      key: "basic";
    };
  };
};

message Provinces {
  int64 id = 1 [json_name = "id"];
  string name = 2 [json_name = "name"];
}

message Regencies {
  int64 id = 1 [json_name = "id"];
  int64 province_id = 2 [json_name = "province_id"];
  string name = 3 [json_name = "name"];
}

message Districts {
  int64 id = 1 [json_name = "id"];
  int64 regency_id = 2 [json_name = "regency_id"];
  string name = 3 [json_name = "name"];
}

message SubDistricts {
  int64 id = 1 [json_name = "id"];
  int64 district_id = 2 [json_name = "district_id"];
  string name = 3 [json_name = "name"];
  string postal_code = 4 [json_name = "postal_code"];
}

message Filter {
  string search = 1 [json_name = "search"];
  int64 id = 2 [json_name = "id"];
  int64 page = 3 [json_name = "page"];
  int64 limit = 4 [json_name = "limit"];
  string trace_id = 5 [json_name = "trace_id"];
}

message Meta {
  int32 code = 1;
  string status = 2;
  string message = 3;
  string internal_message = 4;
  google.protobuf.Any data = 5;
  string trace_id = 6;
}

message EmptyResponse {
  Meta meta = 1;
}

message ProvincesResponse {
  Meta meta = 1;
  repeated Provinces data = 2;
}

message RegenciesResponse {
  Meta meta = 1;
  repeated Regencies data = 2;
}

message DistrictsResponse {
  Meta meta = 1;
  repeated Districts data = 2;
}

message SubDistrictsResponse {
  Meta meta = 1;
  repeated SubDistricts data = 2;
}

message HealthCheckRequest {
  string search = 1 [json_name = "search"];
  int64 id = 2 [json_name = "id"];
  int64 page = 3 [json_name = "page"];
  int64 limit = 4 [json_name = "limit"];
  string trace_id = 5 [json_name = "trace_id"];
}

message HealthCheckResponse {
  Meta meta = 1;
}

service Systems {
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/api/health"
    };
  }

  rpc GetProvinces(Filter) returns (ProvincesResponse) {
    option (google.api.http) = {
      post: "/api/provinces"
      body: "*"
    };
  }

  rpc GetRegencies(Filter) returns (RegenciesResponse) {
    option (google.api.http) = {
      post: "/api/regencies"
      body: "*"
    };
  }

  rpc GetDistricts(Filter) returns (DistrictsResponse) {
    option (google.api.http) = {
      post: "/api/districts"
      body: "*"
    };
  }

  rpc GetSubDistricts(Filter) returns (SubDistrictsResponse) {
    option (google.api.http) = {
      post: "/api/sub-districts"
      body: "*"
    };
  }
}
